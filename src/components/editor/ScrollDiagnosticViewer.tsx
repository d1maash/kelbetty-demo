'use client'

import { useEffect, useRef, useState, useCallback } from 'react'
import { Download, FileText, Save, Edit3, ArrowUp, AlertTriangle } from 'lucide-react'
import { toast } from 'sonner'

interface ScrollDiagnosticViewerProps {
    document: {
        id: string
        title: string
        html: string
        type: string
        createdAt: string
        updatedAt: string
        metadata?: {
            fileSize?: number
            storageKey?: string
        }
    }
    onSave?: (documentId: string, html: string) => Promise<void>
}

export default function ScrollDiagnosticViewer({ document, onSave }: ScrollDiagnosticViewerProps) {
    const editorRef = useRef<HTMLDivElement>(null)
    const [isEditing, setIsEditing] = useState(false)
    const [hasChanges, setHasChanges] = useState(false)
    const [scrollEvents, setScrollEvents] = useState<string[]>([])
    const [isLoading, setIsLoading] = useState(false)

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞
    useEffect(() => {
        if (typeof window === 'undefined') return

        const handleScroll = () => {
            const scrollTop = window.pageYOffset || 0
            const timestamp = new Date().toLocaleTimeString()
            setScrollEvents(prev => [...prev.slice(-9), `–°–∫—Ä–æ–ª–ª: ${scrollTop}px –≤ ${timestamp}`])
        }

        const handleResize = () => {
            const timestamp = new Date().toLocaleTimeString()
            setScrollEvents(prev => [...prev.slice(-9), `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ ${timestamp}`])
        }

        window.addEventListener('scroll', handleScroll)
        window.addEventListener('resize', handleResize)

        return () => {
            window.removeEventListener('scroll', handleScroll)
            window.removeEventListener('resize', handleResize)
        }
    }, [])

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    useEffect(() => {
        console.log('üîç ScrollDiagnosticViewer: –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
        console.log('üîç HTML –¥–ª–∏–Ω–∞:', document.html.length)
        console.log('üîç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞:', window.pageYOffset || 0)

        if (editorRef.current && document.html) {
            setIsLoading(true)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –î–û –∑–∞–≥—Ä—É–∑–∫–∏
            const scrollBefore = window.pageYOffset || 0
            console.log('üîç –ü–æ–∑–∏—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞ –î–û –∑–∞–≥—Ä—É–∑–∫–∏:', scrollBefore)

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML
            editorRef.current.innerHTML = document.html

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                const scrollAfter = window.pageYOffset || 0
                console.log('üîç –ü–æ–∑–∏—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏:', scrollAfter)

                if (scrollAfter !== scrollBefore) {
                    console.log('üö® –ü–†–û–ë–õ–ï–ú–ê! –°–∫—Ä–æ–ª–ª –∏–∑–º–µ–Ω–∏–ª—Å—è —Å', scrollBefore, '–Ω–∞', scrollAfter)
                    setScrollEvents(prev => [...prev.slice(-9), `üö® –ü–†–û–ë–õ–ï–ú–ê! –°–∫—Ä–æ–ª–ª –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${scrollBefore} –Ω–∞ ${scrollAfter}`])
                }

                setIsLoading(false)
            }, 100)
        }
    }, [document.html, document.title])

    const handleContentChange = (e: React.FormEvent<HTMLDivElement>) => {
        const newContent = e.currentTarget.innerHTML
        setHasChanges(newContent !== document.html)
    }

    const handleBlur = async () => {
        if (hasChanges && onSave && editorRef.current) {
            try {
                const html = editorRef.current.innerHTML
                await onSave(document.id, html)
                setHasChanges(false)
                toast.success('–î–æ–∫—É–º–µ–Ω—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω')
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
                toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
            }
        }
    }

    const handleSave = useCallback(async () => {
        if (!onSave || !hasChanges || !editorRef.current) return

        try {
            const html = editorRef.current.innerHTML
            await onSave(document.id, html)
            setHasChanges(false)
            toast.success('–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error)
            toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
        }
    }, [onSave, hasChanges, document.id])

    const forceScrollToTop = () => {
        if (typeof window !== 'undefined') {
            window.scrollTo(0, 0)
            console.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤ –Ω–∞—á–∞–ª–æ')
        }
    }

    const clearScrollEvents = () => {
        setScrollEvents([])
    }

    return (
        <div className="h-full flex flex-col bg-white">
            {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π toolbar */}
            <div className="sticky top-0 z-20 border-b border-slate-200 p-4 bg-yellow-50 shadow-sm">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                        <AlertTriangle className="w-5 h-5 text-yellow-600" />
                        <span className="font-medium text-yellow-900">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∞</span>
                        {isLoading && (
                            <span className="text-sm text-yellow-600">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        )}
                        {hasChanges && (
                            <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded">
                                –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            </span>
                        )}
                    </div>

                    <div className="flex items-center space-x-2">
                        <button
                            onClick={forceScrollToTop}
                            className="flex items-center px-3 py-1 bg-yellow-600 text-white rounded text-sm hover:bg-yellow-700"
                        >
                            üîù –ù–∞–≤–µ—Ä—Ö
                        </button>
                        <button
                            onClick={clearScrollEvents}
                            className="flex items-center px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700"
                        >
                            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                        </button>
                        <button
                            onClick={() => setIsEditing(!isEditing)}
                            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            <Edit3 className="w-4 h-4 mr-2" />
                            {isEditing ? '–ü—Ä–æ—Å–º–æ—Ç—Ä' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                        </button>
                    </div>
                </div>

                {/* –°–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞ */}
                <div className="mt-2 max-h-20 overflow-y-auto bg-white border rounded p-2">
                    <div className="text-xs text-gray-600 mb-1">–°–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞:</div>
                    {scrollEvents.length === 0 ? (
                        <div className="text-xs text-gray-400">–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π</div>
                    ) : (
                        scrollEvents.map((event, i) => (
                            <div key={i} className="text-xs text-gray-700">{event}</div>
                        ))
                    )}
                </div>
            </div>

            {/* Document Content */}
            <div className="flex-1 overflow-auto bg-white">
                <div className="max-w-4xl mx-auto p-8">
                    <div
                        ref={editorRef}
                        className={`document-viewer min-h-full bg-white shadow-sm border border-slate-200 rounded-lg p-8 ${isEditing ? 'outline-none' : ''
                            }`}
                        contentEditable={isEditing}
                        suppressContentEditableWarning={true}
                        onInput={handleContentChange}
                        onBlur={handleBlur}
                        style={{
                            minHeight: '800px',
                            lineHeight: '1.6',
                            fontSize: '14px',
                            fontFamily: 'Times New Roman, serif',
                            outline: isEditing ? 'none' : 'none',
                            wordWrap: 'break-word',
                            overflowWrap: 'break-word'
                        }}
                    />
                </div>
            </div>

            {/* Footer Info */}
            <div className="border-t border-slate-200 p-3 bg-slate-50">
                <div className="flex items-center justify-between text-xs text-slate-500">
                    <p>
                        üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
                    </p>
                    <p>
                        –°–æ–∑–¥–∞–Ω: {new Date(document.createdAt).toLocaleDateString('ru-RU')}
                        {document.metadata?.fileSize && (
                            <span> ‚Ä¢ {Math.round(document.metadata.fileSize / 1024)} –ö–ë</span>
                        )}
                    </p>
                </div>
            </div>
        </div>
    )
}
