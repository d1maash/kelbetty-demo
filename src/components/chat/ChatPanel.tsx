'use client'

import { useState, useRef, useEffect, useCallback } from 'react'
import { Send, Bot, User, Sparkles, AlertCircle, CheckCircle, X } from 'lucide-react'
import type { DocumentData } from '@/hooks/useDocumentImport'
import '@/styles/chat.css'

interface Message {
    id: string
    type: 'user' | 'ai'
    content: string
    timestamp: Date
    suggestion?: {
        description: string
        patch: {
            type: 'html_overwrite'
            documentId: string
            updatedHtml: string
            changes: Array<{
                selector: string
                style: Record<string, string>
                summary: string
            }>
        }
        preview?: string
    }
}

interface ChatPanelProps {
    currentDocument: DocumentData | null
    onDocumentUpdate: (document: DocumentData) => void
}

export default function ChatPanel({ currentDocument, onDocumentUpdate }: ChatPanelProps) {
    const [messages, setMessages] = useState<Message[]>([])
    const [inputValue, setInputValue] = useState('')
    const [isLoading, setIsLoading] = useState(false)
    const [pendingSuggestion, setPendingSuggestion] = useState<Message | null>(null)
    const [isApplyingSuggestion, setIsApplyingSuggestion] = useState(false)
    const messagesEndRef = useRef<HTMLDivElement>(null)

    useEffect(() => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        const scrollToBottom = () => {
            if (messagesEndRef.current) {
                messagesEndRef.current.scrollIntoView({
                    behavior: 'smooth',
                    block: 'end'
                })
            }
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
        const timeoutId = setTimeout(scrollToBottom, 100)
        return () => clearTimeout(timeoutId)
    }, [messages, pendingSuggestion, isLoading])

    const loadChatHistory = useCallback(async () => {
        if (!currentDocument) return

        try {
            const response = await fetch(`/api/chat/${currentDocument.id}`)
            if (response.ok) {
                const data = await response.json()
                if (data.messages && data.messages.length > 0) {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                    const savedMessages: Message[] = data.messages.map((msg: any) => ({
                        id: msg.id,
                        type: msg.type,
                        content: msg.content,
                        timestamp: new Date(msg.createdAt),
                        suggestion: msg.suggestion
                    }))
                    setMessages(savedMessages)
                } else {
                    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    const welcomeMessage: Message = {
                        id: Date.now().toString(),
                        type: 'ai',
                        content: `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º "${currentDocument.title}".\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏ —è —ç—Ç–æ —Å–¥–µ–ª–∞—é! –ù–∞–ø—Ä–∏–º–µ—Ä: "–°–¥–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–∏–Ω–∏–º–∏" –∏–ª–∏ "–£–≤–µ–ª–∏—á—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞".`,
                        timestamp: new Date()
                    }
                    setMessages([welcomeMessage])
                    await saveMessage(welcomeMessage)
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error)
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const welcomeMessage: Message = {
                id: Date.now().toString(),
                type: 'ai',
                content: `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º "${currentDocument.title}".\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏ —è —ç—Ç–æ —Å–¥–µ–ª–∞—é!`,
                timestamp: new Date()
            }
            setMessages([welcomeMessage])
        }
        setPendingSuggestion(null)
    }, [currentDocument])

    const saveMessage = useCallback(async (message: Message) => {
        if (!currentDocument) return

        try {
            await fetch(`/api/chat/${currentDocument.id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: message.type,
                    content: message.content,
                    suggestion: message.suggestion
                })
            })
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
        }
    }, [currentDocument])

    useEffect(() => {
        if (currentDocument) {
            loadChatHistory()
        }
    }, [currentDocument, loadChatHistory])

    const handleSendMessage = async () => {
        if (!inputValue.trim() || !currentDocument) return

        const userMessage: Message = {
            id: Date.now().toString(),
            type: 'user',
            content: inputValue,
            timestamp: new Date()
        }

        setMessages(prev => [...prev, userMessage])
        await saveMessage(userMessage)
        setInputValue('')
        setIsLoading(true)

        try {
            // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ API –ò–ò
            const response = await fetch('/api/ai', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: inputValue,
                    documentId: currentDocument.id,
                }),
            })

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò')
            }

            const data = await response.json()

            const aiMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'ai',
                content: data.response || '–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è.',
                timestamp: new Date(),
                suggestion: data.suggestion ? {
                    description: data.suggestion.description,
                    patch: data.suggestion.patch,
                    preview: data.suggestion.preview
                } : undefined
            }

            setMessages(prev => [...prev, aiMessage])
            await saveMessage(aiMessage)

            if (aiMessage.suggestion) {
                setPendingSuggestion(aiMessage)
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ ChatPanel:', error)

            let errorContent = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'

            if (error instanceof Error) {
                if (error.message.includes('401')) {
                    errorContent = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.'
                } else if (error.message.includes('404')) {
                    errorContent = '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
                } else if (error.message.includes('500')) {
                    errorContent = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                } else {
                    errorContent = `–û—à–∏–±–∫–∞: ${error.message}`
                }
            }

            const errorMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'ai',
                content: errorContent,
                timestamp: new Date()
            }
            setMessages(prev => [...prev, errorMessage])
            await saveMessage(errorMessage)
        } finally {
            setIsLoading(false)
        }
    }

    const handleApplySuggestion = async () => {
        if (!pendingSuggestion || !currentDocument || !pendingSuggestion.suggestion?.patch) {
            return
        }

        const { patch } = pendingSuggestion.suggestion

        if (!patch.updatedHtml) {
            return
        }

        setIsApplyingSuggestion(true)

        try {
            const response = await fetch(`/api/documents/${currentDocument.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    html: patch.updatedHtml
                })
            })

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞')
            }

            const { document: updatedDocument } = await response.json()

            const mergedDocument: DocumentData = {
                ...currentDocument,
                ...updatedDocument,
                html: patch.updatedHtml,
            }

            onDocumentUpdate(mergedDocument)

            const confirmMessage: Message = {
                id: Date.now().toString(),
                type: 'ai',
                content: '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É! –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.',
                timestamp: new Date()
            }

            setMessages(prev => [...prev, confirmMessage])
            await saveMessage(confirmMessage)
            setPendingSuggestion(null)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error)
            const errorMessage: Message = {
                id: (Date.now() + 1).toString(),
                type: 'ai',
                content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ.',
                timestamp: new Date()
            }
            setMessages(prev => [...prev, errorMessage])
            await saveMessage(errorMessage)
        } finally {
            setIsApplyingSuggestion(false)
        }
    }

    const handleRejectSuggestion = async () => {
        if (!pendingSuggestion) return

        const rejectMessage: Message = {
            id: Date.now().toString(),
            type: 'ai',
            content: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞.',
            timestamp: new Date()
        }

        setMessages(prev => [...prev, rejectMessage])
        await saveMessage(rejectMessage)
        setPendingSuggestion(null)
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        })
    }

    return (
        <div className="bg-white flex flex-col h-full max-h-full chat-container">
            {/* Header */}
            <div className="flex-shrink-0 p-4 border-b border-slate-200 chat-header">
                <div className="flex items-center space-x-2">
                    <Bot className="w-5 h-5 text-blue-600" />
                    <h3 className="font-semibold text-slate-900">–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</h3>
                    {currentDocument && (
                        <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                            –ê–∫—Ç–∏–≤–µ–Ω
                        </span>
                    )}
                </div>
                {currentDocument && (
                    <p className="text-xs text-slate-500 mt-1">
                        –†–∞–±–æ—Ç–∞–µ–º —Å: {currentDocument.title}
                    </p>
                )}
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 min-h-0 max-h-full chat-messages">
                {!currentDocument ? (
                    <div className="text-center text-slate-500 mt-8">
                        <Bot className="w-12 h-12 mx-auto mb-3 text-slate-300" />
                        <p className="text-sm">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ò–ò</p>
                    </div>
                ) : (
                    <>
                        {messages.map((message) => (
                            <div
                                key={message.id}
                                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                            >
                                <div
                                    className={`max-w-[85%] rounded-2xl px-4 py-3 ${message.type === 'user'
                                        ? 'bg-blue-600 text-white'
                                        : 'bg-slate-100 text-slate-900'
                                        }`}
                                >
                                    <div className="flex items-start space-x-2">
                                        {message.type === 'ai' && (
                                            <Bot className="w-4 h-4 mt-0.5 text-blue-600" />
                                        )}
                                        {message.type === 'user' && (
                                            <User className="w-4 h-4 mt-0.5 text-white" />
                                        )}
                                        <div className="flex-1">
                                            <p className="text-sm">{message.content}</p>
                                            <p className={`text-xs mt-1 ${message.type === 'user' ? 'text-blue-200' : 'text-slate-500'
                                                }`}>
                                                {formatTime(message.timestamp)}
                                            </p>
                                        </div>
                                    </div>

                                    {/* Suggestion Card */}
                                    {message.suggestion && (
                                        <div className="mt-3 p-3 bg-white rounded-lg border border-slate-200">
                                            <div className="flex items-center space-x-2 mb-2">
                                                <Sparkles className="w-4 h-4 text-yellow-500" />
                                                <span className="text-sm font-medium text-slate-900">
                                                    –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                                </span>
                                            </div>
                                            <p className="text-sm text-slate-600 mb-3">
                                                {message.suggestion.description}
                                            </p>

                                            {pendingSuggestion?.id === message.id && (
                                                <div className="flex space-x-2">
                                                    <button
                                                        onClick={handleApplySuggestion}
                                                        disabled={isApplyingSuggestion}
                                                        className={`flex items-center px-3 py-1.5 text-sm rounded-lg transition-colors ${isApplyingSuggestion
                                                            ? 'bg-green-400 text-white cursor-not-allowed'
                                                            : 'bg-green-600 text-white hover:bg-green-700'
                                                            }`}
                                                    >
                                                        <CheckCircle className="w-4 h-4 mr-1" />
                                                        {isApplyingSuggestion ? '–ü—Ä–∏–º–µ–Ω—è–µ–º...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å'}
                                                    </button>
                                                    <button
                                                        onClick={handleRejectSuggestion}
                                                        disabled={isApplyingSuggestion}
                                                        className={`flex items-center px-3 py-1.5 text-sm rounded-lg transition-colors ${isApplyingSuggestion
                                                            ? 'bg-slate-400 text-white cursor-not-allowed'
                                                            : 'bg-slate-600 text-white hover:bg-slate-700'
                                                            }`}
                                                    >
                                                        <X className="w-4 h-4 mr-1" />
                                                        –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                                    </button>
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}

                        {isLoading && (
                            <div className="flex justify-start">
                                <div className="bg-slate-100 rounded-2xl px-4 py-3">
                                    <div className="flex items-center space-x-2">
                                        <Bot className="w-4 h-4 text-blue-600" />
                                        <div className="flex space-x-1">
                                            <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                                            <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                                            <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}
                    </>
                )}
                <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="flex-shrink-0 p-4 border-t border-slate-200 chat-input">
                {!currentDocument ? (
                    <div className="text-center text-slate-400 text-sm py-4">
                        –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
                    </div>
                ) : (
                    <div className="flex space-x-2">
                        <div className="flex-1 relative">
                            <textarea
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyPress={handleKeyPress}
                                placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ..."
                                disabled={isLoading}
                                className="w-full p-3 pr-12 border border-slate-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-slate-100 disabled:text-slate-500"
                                rows={2}
                            />
                            <button
                                onClick={handleSendMessage}
                                disabled={!inputValue.trim() || isLoading}
                                className="absolute right-2 bottom-2 p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-slate-300 disabled:cursor-not-allowed"
                            >
                                <Send className="w-4 h-4" />
                            </button>
                        </div>
                    </div>
                )}

                {currentDocument && (
                    <div className="mt-2 text-xs text-slate-500">
                        <div className="flex items-center space-x-2">
                            <AlertCircle className="w-3 h-3" />
                            <span>–ò–ò —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å—Ç–∏–ª–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞</span>
                        </div>
                    </div>
                )}
            </div>
        </div>
    )
}
